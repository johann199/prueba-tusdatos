"""Renombrar campos correo → email, pasword → password

Revision ID: 3f7e5405b5f0
Revises: 
Create Date: 2025-07-29 17:15:09.167972

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '3f7e5405b5f0'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

def upgrade():
    op.alter_column('users', 'correo', new_column_name='email')
    op.alter_column('users', 'pasword', new_column_name='password')

#def upgrade() -> None:
 #   """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    #op.drop_index(op.f('ix_sesiones_id'), table_name='sesiones')
    #op.drop_table('sesiones')
    #op.drop_index(op.f('ix_eventos_id'), table_name='eventos')
    #op.drop_table('eventos')
    #op.drop_index(op.f('ix_registro_eventos_id'), table_name='registro_eventos')
    #op.drop_table('registro_eventos')
    #op.drop_index(op.f('ix_users_correo'), table_name='users')
    #op.drop_index(op.f('ix_users_id'), table_name='users')
    #op.drop_table('users')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('correo', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('pasword', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('nombre', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('role', postgresql.ENUM('ADMIN', 'ORGANIZADOR', 'ASISTENTE', name='roles'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('creado', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('modificado', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_correo'), 'users', ['correo'], unique=True)
    op.create_table('registro_eventos',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('evento_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('registrado_en', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('confirmado', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['evento_id'], ['eventos.id'], name=op.f('registro_eventos_evento_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('registro_eventos_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('registro_eventos_pkey'))
    )
    op.create_index(op.f('ix_registro_eventos_id'), 'registro_eventos', ['id'], unique=False)
    op.create_table('eventos',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('eventos_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('titulo', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('descripcion', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('fecha_inicio', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('fecha_fin', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('lugar', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('capacidad', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('registrado', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('estado', postgresql.ENUM('PENDIENTE', 'EN_CURSO', 'FINALIZADO', 'CANCELADO', name='estadosevento'), autoincrement=False, nullable=True),
    sa.Column('creado', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('modificado', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('creador_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['creador_id'], ['users.id'], name='eventos_creador_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='eventos_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_eventos_id'), 'eventos', ['id'], unique=False)
    op.create_table('sesiones',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('titulo', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('descripcion', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('fecha_inicio', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('fecha_fin', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('nombre_orador', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('biografia_orador', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('capacidad', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('creado', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('modificado', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('evento_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['evento_id'], ['eventos.id'], name=op.f('sesiones_evento_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('sesiones_pkey'))
    )
    op.create_index(op.f('ix_sesiones_id'), 'sesiones', ['id'], unique=False)
    # ### end Alembic commands ###
